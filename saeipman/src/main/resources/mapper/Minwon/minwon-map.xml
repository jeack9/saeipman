<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.saeipman.app.minwon.mapper.MinwonMapper">
	
<sql id="criteria">
  
  
    <if test="typeArr != null and typeArr.length > 0">
        <choose>
          <when test="type == 'T'.toString()">
            title LIKE '%' || #{keyword} || '%'
          </when>
          <when test="type == 'C'.toString()">
            content LIKE '%' || #{keyword} || '%'
          </when>
          <when test="type == 'W'.toString()">
            r.room_no LIKE '%' || #{keyword} || '%'
          </when>
          <when test="type == 'TC'.toString()">
            (title LIKE '%' || #{keyword} || '%' OR content LIKE '%' || #{keyword} || '%')
          </when>
          <when test="type == 'TW'.toString()">
            (m.title LIKE '%' || #{keyword} || '%' OR r.room_no LIKE '%' || #{keyword} || '%')
          </when>
          <when test="type == 'TWC'.toString()">
            (m.title LIKE '%' || #{keyword} || '%' OR m.content LIKE '%' || #{keyword} || '%' OR r.room_no LIKE '%' || #{keyword} || '%')
          </when>
        </choose>
    </if>
    
    <if test="imchainId != null and imchainId != ''">
      AND m.imchain_id = #{imchainId}
      
    </if>
    
    <if test="imdaeinId != null and imdaeinId != ''">
      AND r.building_id IN (
        SELECT B.building_id FROM building_info B WHERE B.imdaein_id = #{imdaeinId}
      )
      
    </if>
    
    <if test="buildingId != null and buildingId != ''">
       AND r.BUILDING_ID = #{buildingId}
    </if>
   
    <if test="acceptState != null and acceptState != -1" >
       AND m.ACCEPT_STATE = #{acceptState}
    </if>
  
</sql>

	<!-- 전체조회 -->
	<select id="selectMinwonAll" resultType="MinwonVO">
	  SELECT * FROM (
	    SELECT ROWNUM RN, a.* FROM (
	      SELECT 
	        m.POST_NO, 
	        m.TITLE, 
	        m.CONTENT,
	        CASE 
	          WHEN m.ACCEPT_STATE = 0 THEN '접수전'
	          WHEN m.ACCEPT_STATE = 1 THEN '접수중'
	          WHEN m.ACCEPT_STATE = 2 THEN '처리 완료'
	        END as ACCEPT_STATE,
	        m.GROUP_ID,
	        m.REG_DATE,
	        r.ROOM_NO,
	        r.BUILDING_ID,
	        b.BUILDING_name
	      FROM room_info r  
	      join minwon m on m.room_id = r.room_id
	      join building_info b on b.building_id = r.building_id
	      join constract_info c on m.room_id = c.room_id  and   c.constract_state = 1
	      <where>
	      <include refid="criteria"/>
	      </where>
	      ORDER BY m.post_no DESC
	    ) a WHERE ROWNUM <![CDATA[ <= ]]> #{pageNum} * #{amount}
	  ) b WHERE RN > (#{pageNum} - 1) * #{amount}
	</select>
	
	
	
	<!-- 전체건수 -->
	<select id="getTotalCount" resultType="int">
	  	SELECT COUNT(*)
        FROM room_info R 
        JOIN constract_info C ON C.room_id = R.room_id
        JOIN minwon M ON M.room_id = C.room_id
	
	 <where>
	<include refid="criteria"></include></where>
	</select>
	
	<!-- 임대인별 건물 리스트 -->
	<select id="selectBuilding">
		select building_id, building_name, imdaein_id
		from building_info
		where imdaein_id = #{imdaeinId}
	</select>
	
	
	
	<!-- 단건조회 -->
	<select id="selectMinwonInfo" resultType="MinwonVO">
		SELECT 
		    m.post_no,
		    m.title,
		    m.content,
		    ci.category_type AS categoryType, <!-- 카테고리 이름을 가져옴 -->
		    m.GROUP_ID,
		    r.room_no,
		    m.accept_state,
		    m.visits_date1,
		    m.visits_date2,
		    m.reg_date,
		    m.mod_date,
		    m.alert_type,
		    m.room_id,
		    c.imchain_phone
		FROM 
		    minwon m LEFT JOIN minwon_category ci ON m.category = ci.category_no  <!-- category 번호를 기준으로 조인 -->
		JOIN
    		constract_info c ON m.room_id = c.room_id AND c.imchain_phone  = #{imchainId} AND c.constract_state = 1
		JOIN
    		room_info r ON c.room_id = r.room_id     
		WHERE 
		    m.post_no = #{postNo}
		
	      
	         
		
	</select>

	<!-- 민원처리 업로드 -->
	<update id="updateAcceptState">
	    UPDATE MINWON
	    SET ACCEPT_STATE = #{acceptState}
	    WHERE POST_NO = #{postNo}
	</update>
	<select id="selectimchainId">
		select imchain_id
		from minwon
		where post_no = #{postNo}
	</select>
	<!-- 등록 -->
	<insert id="insertMinwon" parameterType="MinwonVO">
		<selectKey keyProperty="postNo" resultType="int" order="BEFORE"><!-- selectKey는 자동생성된 id값을 삽입하기 위해, BEFORE는 삽입 전에 키 값을 생성하는 것을 의미(실제 삽입 작업 전에 실행됨)-->
		select NVL(max(post_no), 0) + 1 <!-- employees 테이블에서 가장 큰 employee_id 값을 가져와서 1을 더한 값을 반환, 만약 employee_id가 존재하지 않는 경우 0이 반환되고 거기에 1을 더해 새로운 employee_id를 생성 -->
		from minwon
		</selectKey>
		insert into minwon
					(
						post_no,
						title,
						content,
						category,
						GROUP_ID,
						ACCEPT_STATE,
						room_no,
						visits_date1,
						visits_date2,
						reg_date,
						alert_type,
						room_id,
						imchain_id
					)
				values
					(
						#{postNo}
						, #{title}
						, #{content}
						, #{category}
						, #{groupId}
						, 0
						, #{acceptState}
						, #{visitsDate1}
						, #{visitsDate2}
						<choose>
							<when test="regDate != null">
							, #{regDate}
							</when>
							<otherwise>
							, sysdate
							</otherwise>
						</choose>
						,#{alertType}
						,#{roomId}
						,#{imchainId}
					)
	</insert>
	
	<!-- 수정 -->
	<update id="updateMinwon" parameterType="MinwonVO">
		update minwon
		set 
			title = #{title}
			, content = #{content}
			, category = #{category}
			<if test="groupId != null and groupId != ''">
			, GROUP_ID = #{groupId}
			</if>
			, visits_date1 = #{visitsDate1}
			, visits_date2 = #{visitsDate2}
			, mod_date = SYSDATE
		where post_no = #{postNo}
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteMinwon" parameterType="int">
		delete from minwon
		where post_no = #{postNo}
	</delete>
	
	<!-- 카테고리 목록 -->
	<select id="selectCategory" resultType="MinwonVO">
		select category_no,
		       category_type
		from minwon_category
	</select>

	<select id="selectFileName">
		select 	fi.file_name as file_name
		FROM minwon bi JOIN file_info fi
		                    ON bi.group_id = fi.group_id  
		WHERE bi.post_no = #{postNo}
	
	</select>

</mapper>
